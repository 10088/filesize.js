{"version":3,"file":"filesize.min.js","sources":["../src/constants.js","../src/strings.js","../src/filesize.js"],"sourcesContent":["\"use strict\";\r\n\r\nexport const ARRAY = \"array\";\r\nexport const BIT = \"bit\";\r\nexport const BITS = \"bits\";\r\nexport const BYTE = \"byte\";\r\nexport const BYTES = \"bytes\";\r\nexport const EMPTY = \"\";\r\nexport const EXPONENT = \"exponent\";\r\nexport const FUNCTION = \"function\";\r\nexport const IEC = \"iec\";\r\nexport const INVALID_NUMBER = \"Invalid number\";\r\nexport const INVALID_ROUND = \"Invalid rounding method\";\r\nexport const JEDEC = \"jedec\";\r\nexport const OBJECT = \"object\";\r\nexport const PERIOD = \".\";\r\nexport const ROUND = \"round\";\r\nexport const S = \"s\";\r\nexport const SI_KBIT = \"kbit\";\r\nexport const SI_KBYTE = \"kB\";\r\nexport const SPACE = \" \";\r\nexport const STRING = \"string\";\r\nexport const ZERO = \"0\";\r\n","\"use strict\";\r\n\r\nexport const strings = {\r\n\tsymbol: {\r\n\t\tiec: {\r\n\t\t\tbits: [\"bit\", \"Kibit\", \"Mibit\", \"Gibit\", \"Tibit\", \"Pibit\", \"Eibit\", \"Zibit\", \"Yibit\"],\r\n\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\r\n\t\t},\r\n\t\tjedec: {\r\n\t\t\tbits: [\"bit\", \"Kbit\", \"Mbit\", \"Gbit\", \"Tbit\", \"Pbit\", \"Ebit\", \"Zbit\", \"Ybit\"],\r\n\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\r\n\t\t}\r\n\t},\r\n\tfullform: {\r\n\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\r\n\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\r\n\t}\r\n};\r\n","\"use strict\";\r\n\r\nimport {BITS, BYTES, EMPTY, EXPONENT, FUNCTION, IEC, INVALID_NUMBER, INVALID_ROUND, JEDEC, SI_KBIT, SI_KBYTE, SPACE, PERIOD, ZERO, ARRAY, OBJECT, S, BIT, BYTE, STRING, ROUND} from \"./constants\";\r\nimport {strings} from \"./strings\";\r\n\r\n/**\r\n * filesize\r\n *\r\n * @method filesize\r\n * @param  {Mixed}   arg        String, Int or Float to transform\r\n * @param  {Object}  descriptor [Optional] Flags\r\n * @return {String}             Readable file size String\r\n */\r\nfunction filesize (arg, {bits = false, pad = false, base = -1, round = 2, locale = EMPTY, localeOptions = {}, separator = EMPTY, spacer = SPACE, symbols = {}, standard = EMPTY, output = STRING, fullform = false, fullforms = [], exponent = -1, roundingMethod = ROUND, precision = 0} = {}) {\r\n\tlet e = exponent,\r\n\t\tnum = Number(arg),\r\n\t\tresult = [],\r\n\t\tval = 0,\r\n\t\tu = EMPTY;\r\n\r\n\t// Sync base & standard\r\n\tif (base === -1 && standard.length === 0) {\r\n\t\tbase = 10;\r\n\t\tstandard = JEDEC;\r\n\t} else if (base === -1 && standard.length > 0) {\r\n\t\tstandard = standard === IEC ? IEC : JEDEC;\r\n\t\tbase = standard === IEC ? 2 : 10;\r\n\t} else {\r\n\t\tbase = base === 2 ? 2 : 10;\r\n\t\tstandard = base === 10 ? JEDEC : IEC;\r\n\t}\r\n\r\n\tconst ceil = base === 10 ? 1000 : 1024,\r\n\t\tfull = fullform === true,\r\n\t\tneg = num < 0,\r\n\t\troundingFunc = Math[roundingMethod];\r\n\r\n\tif (isNaN(arg)) {\r\n\t\tthrow new TypeError(INVALID_NUMBER);\r\n\t}\r\n\r\n\tif (typeof roundingFunc !== FUNCTION) {\r\n\t\tthrow new TypeError(INVALID_ROUND);\r\n\t}\r\n\r\n\t// Flipping a negative number to determine the size\r\n\tif (neg) {\r\n\t\tnum = -num;\r\n\t}\r\n\r\n\t// Determining the exponent\r\n\tif (e === -1 || isNaN(e)) {\r\n\t\te = Math.floor(Math.log(num) / Math.log(ceil));\r\n\r\n\t\tif (e < 0) {\r\n\t\t\te = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t// Exceeding supported length, time to reduce & multiply\r\n\tif (e > 8) {\r\n\t\tif (precision > 0) {\r\n\t\t\tprecision += 8 - e;\r\n\t\t}\r\n\r\n\t\te = 8;\r\n\t}\r\n\r\n\tif (output === EXPONENT) {\r\n\t\treturn e;\r\n\t}\r\n\r\n\t// Zero is now a special case because bytes divide by 1\r\n\tif (num === 0) {\r\n\t\tresult[0] = 0;\r\n\t\tu = result[1] = strings.symbol[standard][bits ? BITS : BYTES][e];\r\n\t} else {\r\n\t\tval = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));\r\n\r\n\t\tif (bits) {\r\n\t\t\tval = val * 8;\r\n\r\n\t\t\tif (val >= ceil && e < 8) {\r\n\t\t\t\tval = val / ceil;\r\n\t\t\t\te++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst p = Math.pow(10, e > 0 ? round : 0);\r\n\t\tresult[0] = roundingFunc(val * p) / p;\r\n\r\n\t\tif (result[0] === ceil && e < 8 && exponent === -1) {\r\n\t\t\tresult[0] = 1;\r\n\t\t\te++;\r\n\t\t}\r\n\r\n\t\tu = result[1] = base === 10 && e === 1 ? bits ? SI_KBIT : SI_KBYTE : strings.symbol[standard][bits ? BITS : BYTES][e];\r\n\t}\r\n\r\n\t// Decorating a 'diff'\r\n\tif (neg) {\r\n\t\tresult[0] = -result[0];\r\n\t}\r\n\r\n\t// Setting optional precision\r\n\tif (precision > 0) {\r\n\t\tresult[0] = result[0].toPrecision(precision);\r\n\t}\r\n\r\n\t// Applying custom symbol\r\n\tresult[1] = symbols[result[1]] || result[1];\r\n\r\n\tif (locale === true) {\r\n\t\tresult[0] = result[0].toLocaleString();\r\n\t} else if (locale.length > 0) {\r\n\t\tresult[0] = result[0].toLocaleString(locale, localeOptions);\r\n\t} else if (separator.length > 0) {\r\n\t\tresult[0] = result[0].toString().replace(PERIOD, separator);\r\n\t}\r\n\r\n\tif (pad && Number.isInteger(result[0]) === false && round > 0) {\r\n\t\tconst x = separator || PERIOD,\r\n\t\t\ttmp = result[0].toString().split(x),\r\n\t\t\ts = tmp[1] || EMPTY,\r\n\t\t\tl = s.length,\r\n\t\t\tn = round - l;\r\n\r\n\t\tresult[0] = `${tmp[0]}${x}${s.padEnd(l + n, ZERO)}`;\r\n\t}\r\n\r\n\tif (full) {\r\n\t\tresult[1] = fullforms[e] ? fullforms[e] : strings.fullform[standard][e] + (bits ? BIT : BYTE) + (result[0] === 1 ? EMPTY : S);\r\n\t}\r\n\r\n\t// Returning Array, Object, or String (default)\r\n\treturn output === ARRAY ? result : output === OBJECT ? {value: result[0], symbol: result[1], exponent: e, unit: u} : result.join(spacer);\r\n}\r\n\r\n// Partial application for functional programming\r\nfilesize.partial = opt => arg => filesize(arg, opt);\r\n\r\nexport default filesize;\r\n"],"names":["ARRAY","BITS","BYTE","BYTES","EMPTY","EXPONENT","FUNCTION","IEC","INVALID_NUMBER","INVALID_ROUND","JEDEC","OBJECT","PERIOD","ROUND","SI_KBIT","STRING","strings","symbol","iec","bits","bytes","jedec","fullform","filesize","arg","_ref","arguments","length","undefined","_ref$bits","_ref$pad","pad","_ref$base","base","_ref$round","round","_ref$locale","locale","_ref$localeOptions","localeOptions","_ref$separator","separator","_ref$spacer","spacer","_ref$symbols","symbols","_ref$standard","standard","_ref$output","output","_ref$fullform","_ref$fullforms","fullforms","_ref$exponent","exponent","_ref$roundingMethod","roundingMethod","_ref$precision","precision","e","num","Number","result","val","u","ceil","full","neg","roundingFunc","Math","isNaN","TypeError","_typeof","floor","log","pow","p","toPrecision","toLocaleString","toString","replace","isInteger","x","tmp","split","s","l","n","concat","padEnd","value","unit","join","partial","opt"],"mappings":"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"}